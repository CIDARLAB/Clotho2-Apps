/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SDSViewerFrame.java
 *
 * Created on Jun 17, 2012, 11:38:44 PM
 */
package sdsviewer;

import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.TableModel;
import accessibility.ClothoReader;
import accessibility.CollectionManager;
import algorithms.nonmodasm.SRSBioBricks;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;
import algorithms.SRSAlgorithmCore;
import algorithms.modasm.SRSGoldenGate;
import algorithms.modasm.SRSMoClo;
import algorithms.nonmodasm.SRSCPEC;
import algorithms.nonmodasm.SRSGibson;
import algorithms.nonmodasm.SRSSLIC;
import datastructures.SRSGraph;
import datastructures.SRSNode;
import org.clothocad.tool.weyekin.WeyekinPoster;
import org.clothocore.api.core.Collector;
import org.clothocore.api.data.Collection;
import org.clothocore.api.data.ObjType;
import org.clothocore.api.data.Part;
//import org.clothocore.api.data.Format;
import eugene.EugeneExecutor;
import org.clothocore.api.data.Vector;

/**
 *
 * @author Tao
 */
public class SDSViewerFrame extends javax.swing.JFrame {

    /** SDSViewerFrame constructor **/
    public SDSViewerFrame() {
        initComponents();
        
    }

    /**************************************************************************
     * 
     * VIEWER BUTTON ACTIONS
     * 
     **************************************************************************/
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        taFileContents = new java.awt.TextArea();
        label3 = new java.awt.Label();
        jPanel3 = new javax.swing.JPanel();
        lblStats = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblExecutionTime = new javax.swing.JLabel();
        lblSteps = new javax.swing.JLabel();
        lblStages = new javax.swing.JLabel();
        lblGoalParts = new javax.swing.JLabel();
        lblSharing = new javax.swing.JLabel();
        lblEfficiency = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        lblRecommended = new javax.swing.JLabel();
        lblModularity = new javax.swing.JLabel();
        loadButton = new javax.swing.JToggleButton();
        algorithmSelector = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        compositePartList = new javax.swing.JList();
        loadTestButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        selectRequired = new javax.swing.JButton();
        deselectAll = new javax.swing.JButton();
        selectRecommended = new javax.swing.JButton();
        selectForbidden = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        selectIntermediatesTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectCollectionsTable = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        libraryPartTable = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        libraryVectorTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(SDSViewerFrame.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        mainPanel.setName("mainPanel"); // NOI18N

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setName("jPanel2"); // NOI18N

        taFileContents.setEditable(false);
        taFileContents.setFont(resourceMap.getFont("taFileContents.font")); // NOI18N
        taFileContents.setName("taFileContents"); // NOI18N

        label3.setFont(resourceMap.getFont("label3.font")); // NOI18N
        label3.setName("label3"); // NOI18N
        label3.setText(resourceMap.getString("label3.text")); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(taFileContents, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(taFileContents, javax.swing.GroupLayout.DEFAULT_SIZE, 272, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(643, 276));

        lblStats.setFont(resourceMap.getFont("lblStats.font")); // NOI18N
        lblStats.setText(resourceMap.getString("lblStats.text")); // NOI18N
        lblStats.setName("lblStats"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setFont(resourceMap.getFont("jLabel3.font")); // NOI18N
        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setFont(resourceMap.getFont("jLabel4.font")); // NOI18N
        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setFont(resourceMap.getFont("jLabel5.font")); // NOI18N
        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jLabel6.setFont(resourceMap.getFont("jLabel6.font")); // NOI18N
        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        jLabel7.setFont(resourceMap.getFont("jLabel7.font")); // NOI18N
        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N

        lblExecutionTime.setFont(resourceMap.getFont("lblExecutionTime.font")); // NOI18N
        lblExecutionTime.setForeground(resourceMap.getColor("lblExecutionTime.foreground")); // NOI18N
        lblExecutionTime.setText(resourceMap.getString("lblExecutionTime.text")); // NOI18N
        lblExecutionTime.setName("lblExecutionTime"); // NOI18N

        lblSteps.setFont(resourceMap.getFont("lblSteps.font")); // NOI18N
        lblSteps.setForeground(resourceMap.getColor("lblSteps.foreground")); // NOI18N
        lblSteps.setText(resourceMap.getString("lblSteps.text")); // NOI18N
        lblSteps.setName("lblSteps"); // NOI18N

        lblStages.setFont(resourceMap.getFont("lblStages.font")); // NOI18N
        lblStages.setForeground(resourceMap.getColor("lblStages.foreground")); // NOI18N
        lblStages.setText(resourceMap.getString("lblStages.text")); // NOI18N
        lblStages.setName("lblStages"); // NOI18N

        lblGoalParts.setFont(resourceMap.getFont("lblGoalParts.font")); // NOI18N
        lblGoalParts.setForeground(resourceMap.getColor("lblGoalParts.foreground")); // NOI18N
        lblGoalParts.setText(resourceMap.getString("lblGoalParts.text")); // NOI18N
        lblGoalParts.setName("lblGoalParts"); // NOI18N

        lblSharing.setFont(resourceMap.getFont("lblSharing.font")); // NOI18N
        lblSharing.setForeground(resourceMap.getColor("lblSharing.foreground")); // NOI18N
        lblSharing.setText(resourceMap.getString("lblSharing.text")); // NOI18N
        lblSharing.setName("lblSharing"); // NOI18N

        lblEfficiency.setFont(resourceMap.getFont("lblEfficiency.font")); // NOI18N
        lblEfficiency.setForeground(resourceMap.getColor("lblEfficiency.foreground")); // NOI18N
        lblEfficiency.setText(resourceMap.getString("lblEfficiency.text")); // NOI18N
        lblEfficiency.setName("lblEfficiency"); // NOI18N

        runButton.setText(resourceMap.getString("runButton.text")); // NOI18N
        runButton.setName("runButton"); // NOI18N
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        jLabel14.setFont(resourceMap.getFont("jLabel14.font")); // NOI18N
        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        jLabel15.setFont(resourceMap.getFont("jLabel15.font")); // NOI18N
        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N

        lblRecommended.setFont(resourceMap.getFont("lblRecommended.font")); // NOI18N
        lblRecommended.setForeground(resourceMap.getColor("lblRecommended.foreground")); // NOI18N
        lblRecommended.setText(resourceMap.getString("lblRecommended.text")); // NOI18N
        lblRecommended.setName("lblRecommended"); // NOI18N

        lblModularity.setFont(resourceMap.getFont("lblModularity.font")); // NOI18N
        lblModularity.setForeground(resourceMap.getColor("lblModularity.foreground")); // NOI18N
        lblModularity.setText(resourceMap.getString("lblModularity.text")); // NOI18N
        lblModularity.setName("lblModularity"); // NOI18N

        loadButton.setText(resourceMap.getString("loadButton.text")); // NOI18N
        loadButton.setName("loadButton"); // NOI18N
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        algorithmSelector.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BioBricks", "MoClo", "Golden Gate", "Gibson", "CPEC", "SLIC" }));
        algorithmSelector.setName("algorithmSelector"); // NOI18N
        algorithmSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                algorithmSelectorActionPerformed(evt);
            }
        });

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        compositePartList.setName("compositePartList"); // NOI18N
        compositePartList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compositePartListMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(compositePartList);

        loadTestButton.setText(resourceMap.getString("loadTestButton.text")); // NOI18N
        loadTestButton.setName("loadTestButton"); // NOI18N
        loadTestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadTestButtonActionPerformed(evt);
            }
        });

        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14)
                            .addComponent(jLabel5)
                            .addComponent(jLabel2)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addGap(34, 34, 34))
                                .addComponent(jLabel6)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblStages)
                            .addComponent(lblEfficiency)
                            .addComponent(lblSharing)
                            .addComponent(lblSteps)
                            .addComponent(lblGoalParts)
                            .addComponent(lblRecommended)
                            .addComponent(lblModularity)
                            .addComponent(lblExecutionTime))
                        .addGap(26, 26, 26)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel8)
                            .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(algorithmSelector, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(loadTestButton, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                            .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(lblStats)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 590, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblStats)
                .addGap(6, 6, 6)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(algorithmSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadTestButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addComponent(lblSteps)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblSharing)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblEfficiency))
                            .addComponent(lblStages))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel14)
                                    .addComponent(lblRecommended))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel15)
                                    .addComponent(lblModularity))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel5)
                                    .addComponent(lblExecutionTime)))
                            .addComponent(lblGoalParts)))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(116, 116, 116))
        );

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, 665, Short.MAX_VALUE)
                        .addContainerGap(10, Short.MAX_VALUE))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setName("jPanel1"); // NOI18N

        selectRequired.setText(resourceMap.getString("selectRequired.text")); // NOI18N
        selectRequired.setName("selectRequired"); // NOI18N
        selectRequired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRequiredActionPerformed(evt);
            }
        });

        deselectAll.setText(resourceMap.getString("deselectAll.text")); // NOI18N
        deselectAll.setName("deselectAll"); // NOI18N
        deselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectAllActionPerformed(evt);
            }
        });

        selectRecommended.setText(resourceMap.getString("selectRecommended.text")); // NOI18N
        selectRecommended.setMaximumSize(new java.awt.Dimension(147, 23));
        selectRecommended.setMinimumSize(new java.awt.Dimension(147, 23));
        selectRecommended.setName("selectRecommended"); // NOI18N
        selectRecommended.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectRecommendedActionPerformed(evt);
            }
        });

        selectForbidden.setText(resourceMap.getString("selectForbidden.text")); // NOI18N
        selectForbidden.setMaximumSize(new java.awt.Dimension(147, 23));
        selectForbidden.setMinimumSize(new java.awt.Dimension(147, 23));
        selectForbidden.setName("selectForbidden"); // NOI18N
        selectForbidden.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectForbiddenActionPerformed(evt);
            }
        });

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N
        jScrollPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jScrollPane1MouseClicked(evt);
            }
        });

        selectIntermediatesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Intermediate", "Length", "Req", "Rec", "Forbidden"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        selectIntermediatesTable.setName("selectIntermediatesTable"); // NOI18N
        jScrollPane1.setViewportView(selectIntermediatesTable);

        jTabbedPane1.addTab(resourceMap.getString("jScrollPane1.TabConstraints.tabTitle"), jScrollPane1); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        selectCollectionsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "# Parts", "# Vectors", "Use as Library", "Save to Collection"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Boolean.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        selectCollectionsTable.setName("selectCollectionsTable"); // NOI18N
        selectCollectionsTable.getTableHeader().setReorderingAllowed(false);
        selectCollectionsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectCollectionsTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(selectCollectionsTable);

        jTabbedPane1.addTab(resourceMap.getString("jScrollPane2.TabConstraints.tabTitle"), jScrollPane2); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        libraryPartTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null}
            },
            new String [] {
                "Name", "Composition", "Left Overhang", "Right Overhang"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        libraryPartTable.setName("libraryPartTable"); // NOI18N
        libraryPartTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libraryPartTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(libraryPartTable);
        libraryPartTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("libraryPartTable.columnModel.title0")); // NOI18N
        libraryPartTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("libraryPartTable.columnModel.title1")); // NOI18N

        jTabbedPane1.addTab(resourceMap.getString("jScrollPane4.TabConstraints.tabTitle"), jScrollPane4); // NOI18N

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        libraryVectorTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Left Overhang", "Right Overhang", "Resistance", "Description", "Use for all"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        libraryVectorTable.setName("libraryVectorTable"); // NOI18N
        libraryVectorTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                libraryVectorTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(libraryVectorTable);
        libraryVectorTable.getColumnModel().getColumn(0).setHeaderValue(resourceMap.getString("libraryPartTable.columnModel.title0")); // NOI18N
        libraryVectorTable.getColumnModel().getColumn(1).setHeaderValue(resourceMap.getString("libraryPartTable.columnModel.title1")); // NOI18N

        jTabbedPane1.addTab(resourceMap.getString("jScrollPane5.TabConstraints.tabTitle"), jScrollPane5); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(selectForbidden, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(selectRequired, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(selectRecommended, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deselectAll, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)))
                .addGap(23, 23, 23))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {deselectAll, selectForbidden, selectRecommended, selectRequired});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 509, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectForbidden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(selectRequired))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectRecommended, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deselectAll))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 695, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mainPanel, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void selectRequiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRequiredActionPerformed
        /*
        DefaultTableModel model = ((DefaultTableModel) tIntermediates.getModel());          for (int index = 0; index < model.getRowCount(); index++) {             model.setValueAt(false, index, 3);         }     }//GEN-LAST:event_selectRequiredActionPerformed
         */

        //Get device file and appropriate eugene script to select required intermediates with Eugene
        compositePartToEugeneFile();
        String[] required = eugeneSriptSelect("Required");
        required = eugeneToInts(required);

        //Given intermediates found, apply to selection table
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < required.length; j++) {
                if (model.getValueAt(i, 0).toString().equalsIgnoreCase(required[j])) {
                    model.setValueAt(true, i, 2);
                }
            }
        }
    }
    
    private void deselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectAllActionPerformed
        /*
        DefaultTableModel model = ((DefaultTableModel) tIntermediates.getModel());          for (int index = 0; index < model.getRowCount(); index++) {             model.setValueAt(true, index, 3);         }     }//GEN-LAST:event_deselectAllActionPerformed
         */
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            model.setValueAt(false, i, 2);
            model.setValueAt(false, i, 3);
            model.setValueAt(false, i, 4);
        }
    }
    
    private void selectRecommendedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectRecommendedActionPerformed
        /*
        DefaultTableModel model = ((DefaultTableModel) tIntermediates.getModel());          for (int index = 0; index < model.getRowCount(); index++) {             model.setValueAt(false, index, 2);         }     }//GEN-LAST:event_selectRecommendedActionPerformed
         */

        //Get device file and appropriate eugene script to select recommended intermediates with Eugene
        compositePartToEugeneFile();
        String[] recommended = eugeneSriptSelect("Recommended");
        recommended = eugeneToInts(recommended);

        //Given intermediates found, apply to selection table
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < recommended.length; j++) {
                if (model.getValueAt(i, 0).toString().equalsIgnoreCase(recommended[j])) {
                    model.setValueAt(true, i, 3);
                }
            }
        }
    }
    
    private void selectForbiddenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectForbiddenActionPerformed
        /*
        DefaultTableModel model = ((DefaultTableModel) tIntermediates.getModel());          for (int index = 0; index < model.getRowCount(); index++) {             model.setValueAt(true, index, 2);         }     }//GEN-LAST:event_selectForbiddenActionPerformed
         */
        //Get device file and appropriate eugene script to select intermediates

        //Get device file and appropriate eugene script to select forbidden intermediates using Eugene
        compositePartToEugeneFile();
        String[] forbidden = eugeneSriptSelect("Forbidden");
        forbidden = eugeneToInts(forbidden);

        //Given intermediates found, apply to selection table
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            for (int j = 0; j < forbidden.length; j++) {
                if (model.getValueAt(i, 0).toString().equalsIgnoreCase(forbidden[j])) {
                    model.setValueAt(true, i, 4);
                }
            }
        }
    }
        
    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        if (compositePartList.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Please select a device to construct");
            return;
        }
        String selected = (String) algorithmSelector.getSelectedItem();
        if (selected.equals("BioBricks")) {

            //Run SDS++ algorithm
            runBioBricks();
        } else if (selected.equals("Gibson")) {

            //Run SRS Gibson algorithm
            runGibson();
        } else if (selected.equals("CPEC")) {

            //Run SRS CPEC algorithm
            runCPEC();
        } else if (selected.equals("SLIC")) {

            //Run SRS SLIC algorithm
            runSLIC();
        } else if (selected.equals("MoClo")) {

            //Run SRS MoClo algorithm
            runMoClo();
        } else if (selected.equals("Golden Gate")) {

            //Run SRS Golden Gate algorithm
            runGoldenGate();
//        } else if (selected.equals("Gateway")) {
//
//            //Run SRS Gateway algorithm
//            runGateway();
        } else {
            JOptionPane.showMessageDialog(null, "Please select an algorithm to run");
            
        }
        
        refreshCanvas();
    }//GEN-LAST:event_runButtonActionPerformed
    
        private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
            /*
        DefaultListModel listModel = new DefaultListModel();         File folder = new File(tfPathToFiles.getText());         for (final File fileEntry : folder.listFiles()) {             String[] split = fileEntry.getAbsolutePath().split("\\.");             if (split[split.length - 1].equals("cpf")) {                 listModel.addElement(fileEntry.getName());             }         }         lFiles = new JList(listModel);         jScrollPane2.setViewportView(lFiles);         lFiles.addMouseListener(new java.awt.event.MouseAdapter() {              public void mouseClicked(java.awt.event.MouseEvent evt) {                 lFilesMouseClicked(evt);             }         });     }//GEN-LAST:event_loadButtonActionPerformed
        /*************************************************/

        //Initialize parts list    
        DefaultListModel partListModel = new DefaultListModel();
        List<String> allPartNames = new ArrayList<String>();
        ArrayList<Part> allParts = Collector.getAll(ObjType.PART);
        for (Part somePart : allParts) {
            if (somePart.getPartType().equals(Part.partType.Composite)) {
                allPartNames.add(somePart.getName());
            }
        }
        Collections.sort(allPartNames);
        for (String s : allPartNames) {
            partListModel.addElement(s);
        }
        compositePartList.setModel(partListModel);

        //Initialize libraryList
        for (int i = 0; i < selectCollectionsTable.getModel().getRowCount(); i++) {
            ((DefaultTableModel) selectCollectionsTable.getModel()).removeRow(0);
        }
        ArrayList<Collection> allCollections = Collector.getAll(ObjType.COLLECTION);
        for (Collection someCollection : allCollections) {
            ((DefaultTableModel) selectCollectionsTable.getModel()).addRow(new Object[]{someCollection.getName(), someCollection.recursiveGetAllLinksOf(ObjType.PART).size(), false});
        }
    }
    
    private void compositePartListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compositePartListMouseClicked

        //This is what is done when a composite part is selected from the list in the collection
        //Initialize all table/list values
        int[] selectedIndices = compositePartList.getSelectedIndices();
        ListModel model = compositePartList.getModel();
        ArrayList<Object[]> rowData = new ArrayList<Object[]>();
        _goalParts = new HashMap<Part, ArrayList<Part>>();
        taFileContents.setText("");
        _goalParts.clear();
        resetAll();
        String taContents = "";

        //If any composite parts are selected
        if (selectedIndices.length > 0) {
            for (int i : selectedIndices) {

                //Get selected part and its composition
                Part targetPart = Part.retrieveByExactName(model.getElementAt(i).toString());
                ArrayList<Part> composition = new ArrayList<Part>();
                try {
                    composition = ClothoReader.getComposition(targetPart);
                    _goalParts.put(targetPart, composition);
                } catch (Exception e) {
//                    e.printStackTrace();
                }

                //Populate upper left box with a composite part and its composition
                taContents = taContents + "#" + targetPart.getName() + "\n";
                for (int j = 0; j < composition.size(); j++) {
                    Part current = composition.get(j);
                    ArrayList<String> sTags = current.getSearchTags();
                    String typeTag = "(none)";
                    String LO = "(none)";
                    String RO = "(none)";
                    ArrayList<String> type = new ArrayList<String>();
                    for (int k = 0; k < sTags.size(); k++) {
                        if (sTags.get(k).startsWith("Type:")) {
                            typeTag = sTags.get(k);
                            ArrayList<String> types = SRSAlgorithmCore.parseTypeTags(typeTag);
                            type.addAll(types);
                        } else if (sTags.get(k).startsWith("LO:")) {
                            LO = sTags.get(k).substring(4);
                        } else if (sTags.get(k).startsWith("RO:")) {
                            RO = sTags.get(k).substring(4);
                        }
                    }
                    taContents = taContents + current.getName() + ", Type: " + type.toString() + ", Length: " + current.getSeq().seqLength() + ", LO: " + LO + ", RO: " + RO + "\n";
                }

                //Display all intermediates
                HashSet<List<Part>> seenIntermediates = new HashSet();
                for (int start = 0; start < composition.size(); start++) {
                    for (int end = start + 2; end <= composition.size(); end++) {
                        List<Part> intermediate = composition.subList(start, end);
                        if (!seenIntermediates.contains(intermediate)) {
                            seenIntermediates.add(intermediate);
                            String name = "";
                            int length = 0;
                            for (Part somePart : intermediate) {
                                name = name + ", " + somePart.getName();
                                length = length + somePart.getSeq().seqLength();
                            }
                            rowData.add(new Object[]{"[" + name.substring(2) + "]", length, false, false, false});//substring skips over the first comma and space
                        }
                    }
                }
            }
            taFileContents.append(taContents);
        }
        for (int i = 0; i < rowData.size(); i++) {
            ((DefaultTableModel) selectIntermediatesTable.getModel()).addRow(rowData.get(i));
        }
    }//GEN-LAST:event_compositePartListMouseClicked
    
private void loadTestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadTestButtonActionPerformed

    //Load all available collections
    int rowCount = selectCollectionsTable.getModel().getRowCount();
    for (int i = 0; i < rowCount; i++) {
        ((DefaultTableModel) selectCollectionsTable.getModel()).removeRow(0);
    }
    ArrayList<Collection> allCollections = Collector.getAll(ObjType.COLLECTION);
    for (Collection someCollection : allCollections) {
        ((DefaultTableModel) selectCollectionsTable.getModel()).addRow(new Object[]{someCollection.getName(), someCollection.recursiveGetAllLinksOf(ObjType.PART).size(), someCollection.recursiveGetAllLinksOf(ObjType.VECTOR).size(), false, false});
    }
    DefaultListModel clothoListModel = new DefaultListModel();
    List<String> allPartNames = new ArrayList<String>();
    ArrayList<Part> allParts = new ArrayList<Part>();
    
    //Call composite parts of interest
    allParts.add(Part.retrieveByExactName("test1"));
    allParts.add(Part.retrieveByExactName("test2"));
    allParts.add(Part.retrieveByExactName("NORgate"));
    allParts.add(Part.retrieveByExactName("repressilator2"));
    allParts.add(Part.retrieveByExactName("ckt69"));
    allParts.add(Part.retrieveByExactName("ckt96"));
    
    for (Part somePart : allParts) {
        if (somePart.getPartType().equals(Part.partType.Composite)) {
            allPartNames.add(somePart.getName());
        }
    }
    Collections.sort(allPartNames);
    for (String s : allPartNames) {
        clothoListModel.addElement(s);
    }
    
        compositePartList.setModel(clothoListModel);}//GEN-LAST:event_loadTestButtonActionPerformed
    
private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed

    //Save intermediates (to a collection if marked) and create graph files
    ClothoReader reader = new ClothoReader();
//    ClothoReader.refreshCompositePartList();
    ArrayList<String> graphTextFiles = new ArrayList<String>();
    ArrayList<String> arcTextFiles = new ArrayList<String>();
    for (SRSGraph result : _assemblyGraphs) {
        try {
            reader.nodesToClothoPartsVectors(result);
            
            TableModel collectionsTableModel = selectCollectionsTable.getModel();
            for (int j = 0; j < collectionsTableModel.getRowCount(); j++) {

                //If the checkbox for save collection is selected
                if ((Boolean) collectionsTableModel.getValueAt(j, 4)) {
                    CollectionManager manager = new CollectionManager();
                    manager.addToCollection(result, true);
                }
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        //Make individual graph files
        boolean canPigeon = result.canPigeon();                
        ArrayList<String> postOrderEdges = result.getPostOrderEdges();
        arcTextFiles.add(result.printArcsFile(postOrderEdges));
        graphTextFiles.add(result.generateWeyekinFile(postOrderEdges, canPigeon));
//        ArrayList<String> edges = result.getEdges();
//        graphTextFiles.add(result.generateWeyekinFile(edges,false));
    }

    //Merge graph files and print
    String mergedGraphText = SRSGraph.mergeWeyekinFiles(graphTextFiles);
    String mergedArcText = SRSGraph.mergeArcFiles(arcTextFiles);
    WeyekinPoster.setDotText(mergedGraphText);
    WeyekinPoster.postMyVision();

    //Load all available collections
    int rowCount = selectCollectionsTable.getModel().getRowCount();
    for (int i = 0; i < rowCount; i++) {
        ((DefaultTableModel) selectCollectionsTable.getModel()).removeRow(0);
    }
    ArrayList<Collection> allCollections = Collector.getAll(ObjType.COLLECTION);
    for (Collection someCollection : allCollections) {
        ((DefaultTableModel) selectCollectionsTable.getModel()).addRow(new Object[]{someCollection.getName(), someCollection.recursiveGetAllLinksOf(ObjType.PART).size(), someCollection.recursiveGetAllLinksOf(ObjType.VECTOR).size(), false, false});
    }

    //Print to file
    JFileChooser fc = new JFileChooser();
    fc.setDialogTitle("Save Arcs File...");
    int returnVal = fc.showSaveDialog(null);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fc.getSelectedFile();
        try {
            FileWriter fw = new FileWriter(file);
            BufferedWriter out = new BufferedWriter(fw);
            out.write(mergedArcText);
            out.close();
        } catch (Exception e) {
//            e.printStackTrace();
        }
    }
    fc = new JFileChooser();
    fc.setDialogTitle("Save Graph Text File...");
    returnVal = fc.showSaveDialog(null);
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        File file = fc.getSelectedFile();
        try {
            FileWriter fw = new FileWriter(file);
            BufferedWriter out = new BufferedWriter(fw);
            out.write(mergedGraphText);
            out.close();
        } catch (Exception e) {
//            e.printStackTrace();
        }
    }

}//GEN-LAST:event_saveButtonActionPerformed
    
private void algorithmSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_algorithmSelectorActionPerformed
}//GEN-LAST:event_algorithmSelectorActionPerformed
    
private void libraryPartTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libraryPartTableMouseClicked
}//GEN-LAST:event_libraryPartTableMouseClicked
    
private void selectCollectionsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectCollectionsTableMouseClicked

    //Clear the elements that might already be in the part and vector table
    int partRowCount = libraryPartTable.getModel().getRowCount();
    for (int i = 0; i < partRowCount; i++) {
        ((DefaultTableModel) libraryPartTable.getModel()).removeRow(0);
    }
    int vectorRowCount = libraryVectorTable.getModel().getRowCount();
    for (int i = 0; i < vectorRowCount; i++) {
        ((DefaultTableModel) libraryVectorTable.getModel()).removeRow(0);
    }

    //For all of the available collections
    TableModel collectionsTableModel = selectCollectionsTable.getModel();
    for (int j = 0; j < collectionsTableModel.getRowCount(); j++) {

        //If the checkbox for the collection is selected, add part to collection part table, otherwise clear the existing list
        if ((Boolean) collectionsTableModel.getValueAt(j, 3)) {
            Collection selectedCollection = Collection.retrieveByName((String) collectionsTableModel.getValueAt(j, 0));
            HashSet<String> allPartLinks = selectedCollection.recursiveGetAllLinksOf(ObjType.PART);
            HashSet<String> allVectorLinks = selectedCollection.recursiveGetAllLinksOf(ObjType.VECTOR);

            //For all parts in the collection
            for (String containedLink : allPartLinks) {
                Part containedPart = Collector.getPart(containedLink);
                ArrayList<String> tags = containedPart.getSearchTags();
                String RO = new String();
                String LO = new String();
                for (int k = 0; k < tags.size(); k++) {
                    if (tags.get(k).startsWith("LO:")) {
                        LO = tags.get(k).substring(4);
                    } else if (tags.get(k).startsWith("RO:")) {
                        RO = tags.get(k).substring(4);
                    }
                }
                ArrayList<Part> comp = new ArrayList<Part>();
                try {
                    comp = ClothoReader.getComposition(containedPart);
                } catch (Exception ex) {
                    Logger.getLogger(SDSViewerFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                ((DefaultTableModel) libraryPartTable.getModel()).addRow(new Object[]{containedPart.getName(), comp.toString(), LO, RO});
            }

            //For all the vectors in the collection
            for (String containedLink : allVectorLinks) {
                Vector containedVector = Collector.getVector(containedLink);
                ArrayList<String> tags = containedVector.getSearchTags();
                String resistance = new String();
                String RO = new String();
                String LO = new String();
                for (int k = 0; k < tags.size(); k++) {
                    if (tags.get(k).startsWith("Resistance:")) {
                        resistance = tags.get(k).substring(12);
                    } else if (tags.get(k).startsWith("LO:")) {
                        LO = tags.get(k).substring(4);
                    } else if (tags.get(k).startsWith("RO:")) {
                        RO = tags.get(k).substring(4);
                    }
                }
                
//                System.out.println("Name: " + containedVector.getName());
//                System.out.println("LO: " + LO);
//                System.out.println("RO: " + RO);
//                System.out.println("Resistance: " + resistance);
//                System.out.println("Desc: " + containedVector.getShortDescription());
                
                ((DefaultTableModel) libraryVectorTable.getModel()).addRow(new Object[]{containedVector.getName(), LO, RO, resistance, containedVector.getShortDescription(), false});
            }
        }
    }
}//GEN-LAST:event_selectCollectionsTableMouseClicked
    
private void jScrollPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jScrollPane1MouseClicked
}//GEN-LAST:event_jScrollPane1MouseClicked
    
private void libraryVectorTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_libraryVectorTableMouseClicked
    
    //Find where the box is checked
    boolean isChecked = false;
    int rowReq = 0;
    TableModel libVectorTable = libraryVectorTable.getModel();
    for (int i = 0; i < libVectorTable.getRowCount(); i++) {
        if ((Boolean) libVectorTable.getValueAt(i, 5)) {
            rowReq = i;
            isChecked = true;
        }
    }

    //If a box has been checked
    if (isChecked) {
        for (int j = 0; j < libVectorTable.getRowCount(); j++) {
            if (rowReq != j) {
                libVectorTable.setValueAt(false, j, 5);
            }
        }
    }
    
}//GEN-LAST:event_libraryVectorTableMouseClicked

    /**************************************************************************
     * 
     * AUTOMATIC VIEWER REFRESHERS AND MAIN METHOD
     * 
     **************************************************************************/
    private void refreshCanvas() {
        lblStats.setText("Statistics:");
        lblStages.setText(_statistics.getStages());
        lblSteps.setText(_statistics.getSteps());
        lblSharing.setText(_statistics.getSharing());
        lblEfficiency.setText(_statistics.getEfficiency());
        lblGoalParts.setText(_statistics.getGoalParts());
        lblRecommended.setText(_statistics.getRecommended());
        lblModularity.setText(_statistics.getModularity());
        lblExecutionTime.setText(_statistics.getExecutionTime());
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SDSViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SDSViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SDSViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SDSViewerFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            
            @Override
            public void run() {
                new SDSViewerFrame().setVisible(true);
            }
        });
    }
    
    public void resetAll() {
//        tpCanvas.removeAll();
        _assemblyGraphs.clear();
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        //removes all rows in intermediates table
        while (model.getRowCount() > 0) {
            model.removeRow(0);
        }
        selectIntermediatesTable.setModel(model);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox algorithmSelector;
    private javax.swing.JList compositePartList;
    private javax.swing.JButton deselectAll;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private java.awt.Label label3;
    private javax.swing.JLabel lblEfficiency;
    private javax.swing.JLabel lblExecutionTime;
    private javax.swing.JLabel lblGoalParts;
    private javax.swing.JLabel lblModularity;
    private javax.swing.JLabel lblRecommended;
    private javax.swing.JLabel lblSharing;
    private javax.swing.JLabel lblStages;
    private javax.swing.JLabel lblStats;
    private javax.swing.JLabel lblSteps;
    private javax.swing.JTable libraryPartTable;
    private javax.swing.JTable libraryVectorTable;
    private javax.swing.JToggleButton loadButton;
    private javax.swing.JButton loadTestButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton runButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable selectCollectionsTable;
    private javax.swing.JButton selectForbidden;
    private javax.swing.JTable selectIntermediatesTable;
    private javax.swing.JButton selectRecommended;
    private javax.swing.JButton selectRequired;
    private java.awt.TextArea taFileContents;
    // End of variables declaration//GEN-END:variables

    /** Add selected recommended, required and forbidden intermediates to the algorithm of choice **/
    private void findReqRecForbIntermediates() {
        _required = new HashSet<String>();
        _recommended = new HashSet<String>();
        _forbidden = new HashSet<String>();
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int index = 0; index < model.getRowCount(); index++) {
            String partName = (String) model.getValueAt(index, 0);
            boolean isRequired = (Boolean) model.getValueAt(index, 2);
            boolean isRecommended = (Boolean) model.getValueAt(index, 3);
            boolean isForbidden = (Boolean) model.getValueAt(index, 4);
            if (isRequired) {
                _required.add(partName);
            }
            if (isRecommended) {
                _recommended.add(partName);
            }
            if (isForbidden) {
                _forbidden.add(partName);
            }
        }
    }

    /** Populate part library using parts in selected collections **/
    private ArrayList<Part> populatePartLibrary() {

        //Library of intermediates that you'd like to use in assembly
        ArrayList<Part> library = new ArrayList<Part>();
        TableModel collectionsTableModel = selectCollectionsTable.getModel();
        if (collectionsTableModel.getRowCount() > 0) {
            for (int i = 0; i < collectionsTableModel.getRowCount(); i++) {

                //If the checkbox for a parts library is selected
                if ((Boolean) collectionsTableModel.getValueAt(i, 3)) {
                    Collection selectedCollection = Collection.retrieveByName((String) collectionsTableModel.getValueAt(i, 0));
                    HashSet<String> allPartLinks = selectedCollection.recursiveGetAllLinksOf(ObjType.PART);
                    for (String containedLink : allPartLinks) {
                        Part part = Collector.getPart(containedLink);
                        library.add(part);
                    }
                }

            }
        }
        return library;
    }

    /** Populate vector library **/
    private HashSet<Vector> populateVectorLibrary() {

        HashSet<Vector> vecLib = new HashSet<Vector>();
        TableModel collectionsTableModel = selectCollectionsTable.getModel();
        if (collectionsTableModel.getRowCount() > 0) {
            for (int i = 0; i < collectionsTableModel.getRowCount(); i++) {

                //If the checkbox for a parts library is selected
                if ((Boolean) collectionsTableModel.getValueAt(i, 3)) {

                    //Determine if any of the vectors are supposed to be used for all intermediates of an assembly                
                    HashSet<Vector> useForAllVec = new HashSet<Vector>();
                    TableModel libVectorTable = libraryVectorTable.getModel();
                    for (int j = 0; j < libVectorTable.getRowCount(); j++) {
                        if ((Boolean) libVectorTable.getValueAt(j, 5)) {
                            Vector useForAll = Vector.retrieveByName((String) libVectorTable.getValueAt(j, 0));
                            useForAllVec.add(useForAll);
                        }
                    }

                    //Look at all vectors in the collection
                    Collection selectedCollection = Collection.retrieveByName((String) collectionsTableModel.getValueAt(i, 0));
                    HashSet<String> allVectorLinks = selectedCollection.recursiveGetAllLinksOf(ObjType.VECTOR);
                    for (String containedLink : allVectorLinks) {
                        Vector vector = Collector.getVector(containedLink);

                        //If there are any vectors in the use-for-all hash, only add that vector to library, otherwise add all (NOTE: Convoluted code... could be improved)
                        if (useForAllVec.isEmpty()) {
                            vecLib.add(vector);
                        } else {
                            for (Vector use : useForAllVec) {
                                if (use.getName().equals(vector.getName())) {
                                    vecLib.add(vector);
                                }
                            }
                        }
                    }
                }
            }
        }
        return vecLib;
    }

    /** Traverse a solution graph for statistics **/
    private void solutionStats(ArrayList<SRSGraph> optimalGraphs, boolean printOutSolution) {

        //Initialize statistics
        HashSet<String> recd = new HashSet<String>();
//        HashSet<String> reqd = new HashSet<String>();
        HashSet<String> steps = new HashSet<String>();
        HashSet<String> sharing = new HashSet<String>();
        int stages = 0;
        double modularity = 0;
        double efficiency = 0;
        ArrayList<Double> effArray = new ArrayList<Double>();
        
        for (SRSGraph graph : optimalGraphs) {
//            System.out.println("Adding to assemblyGraphs" + graph.getRootNode().getPartComposition().toString());
            _assemblyGraphs.add(graph);
            
            //Get stages of this graph, if largest, set as assembly stages
            int currentStages = graph.getStages();
            if (currentStages > stages) {
                stages = currentStages;
            }
            
            //Tabulate efficiency and modularity
            modularity = modularity + graph.getModularity();
            effArray.addAll(graph.getEfficiency());
            
            //Traverse nodes to get scores for steps, recommended and sharing
            HashSet<SRSNode> seenNodes = new HashSet();
            seenNodes.add(graph.getRootNode());
            ArrayList<SRSNode> queue = new ArrayList();
            queue.add(graph.getRootNode());
            while (!queue.isEmpty()) {
                SRSNode current = queue.get(0);
                queue.remove(0);
                if (printOutSolution) {
                    System.out.println("------------------------------");
                    System.out.println("Node: " + current.toString());
                    System.out.println("Composition: " + current.getComposition());
                    System.out.println("Type: " + current.getType());
                    System.out.println("I have " + (current.getNeighbors().size()) + " neighbors");
                    ArrayList<SRSNode> neighbors = current.getNeighbors();
                    ArrayList<String> neighbornames = new ArrayList<String>();
                    for (int i = 0; i < neighbors.size(); i++) {
                        neighbornames.add(neighbors.get(i).getComposition().toString());
                    }
                    System.out.println("Neighbors: " + current.getNeighbors());
                    System.out.println("Neighbor compositions: " + neighbornames.toString());
                    System.out.println("uuid: " + current.getUUID());
                    System.out.println("stage: " + current.getStage());
                    if (current.getVector() != null) {
                        System.out.println("vector resistance: " + current.getVector().getResistance());
                    }
                    System.out.println("vector: " + current.getVector());
                    System.out.println("LO: " + current.getLOverhang());
                    System.out.println("RO: " + current.getROverhang());
                }
                if (current.getComposition().size() > 1) {
                    if (steps.contains(current.getComposition().toString())) {
                        sharing.add(current.getComposition().toString());
                    }
                    if (!current.getNeighbors().isEmpty()) {
                        steps.add(current.getComposition().toString());
                    }
                }
//                if (_required.contains(current.getPartComposition().toString())) {
//                    reqd.add(current.getPartComposition().toString());
//                }
                if (_recommended.contains(current.getComposition().toString())) {
                    recd.add(current.getComposition().toString());
                }
                for (SRSNode node : current.getNeighbors()) {
                    if (!seenNodes.contains(node)) {
                        seenNodes.add(node);
                        queue.add(node);
                    }
                }
            }

            //Get the average efficiency of all steps in this assembly
            double sum = 0;
            for (int i = 0; i < effArray.size(); i++) {
                sum = sum + effArray.get(i);
            }
            efficiency = sum/effArray.size();
            
            //Warn if no steps or stages are required to build part - i.e. it already exists in a library
            if (steps.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Warning! All goal part(s) already exist! No assembly required");
            }
            
            //Statistics determined
            _statistics.setModularity(modularity);
            _statistics.setEfficiency(efficiency);
            _statistics.setRecommended(recd.size());
            _statistics.setStages(stages);
            _statistics.setSteps(steps.size());
            _statistics.setSharing(sharing.size());
            _statistics.setGoalParts(optimalGraphs.size());
            _statistics.setExecutionTime(Statistics.getTime());
        }
    }

    /**************************************************************************
     * 
     * RUN ASSEMBLY METHODS
     * 
     **************************************************************************/
    /** Run Binary SRS algorithm **/
    private void runBioBricks() {

        //Run algorithm for BioBricks assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        HashSet<Vector> vecLibrary = populateVectorLibrary();
        System.out.println("Upon entry to BioBricks algorithm, the vector library size: " + vecLibrary.size());
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSBioBricks biobricks = new SRSBioBricks();
        Statistics.start();
        ArrayList<SRSGraph> optimalGraphs = biobricks.bioBricksClothoWrapper(gps, vecLibrary, _required, _recommended, _forbidden, library, false);
        Statistics.stop();
        solutionStats(optimalGraphs, true);

        //Clean up data
        library = null;
        gps = null;
    }

    /** Run SRS algorithm for Gibson **/
    private void runGibson() {

        //Run algorithm for Gibson assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        HashSet<Vector> vecLibrary = populateVectorLibrary();
        System.out.println("Upon entry to Gibson algorithm, the vector library size: " + vecLibrary.size());
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSGibson gibson = new SRSGibson();
        
        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
        efficiencies.put(2, 1.0);
        efficiencies.put(3, 0.95);
        efficiencies.put(4, 0.9);
        efficiencies.put(5, 0.9);
        efficiencies.put(6, 0.9);
        efficiencies.put(7, 0.85);
        efficiencies.put(8, 0.85);
        efficiencies.put(9, 0.8);
        efficiencies.put(10, 0.8);
        
        Statistics.start();
        ArrayList<SRSGraph> optimalGraphs = gibson.gibsonClothoWrapper(gps, vecLibrary, _required, _recommended, _forbidden, library, false, efficiencies);
        Statistics.stop();
        solutionStats(optimalGraphs, false);

        //Clean up data
        library = null;
        gps = null;
    }

    /** Run SRS algorithm for CPEC **/
    private void runCPEC() {

        //Run algorithm for CPEC assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        HashSet<Vector> vecLibrary = populateVectorLibrary();
        System.out.println("Upon entry to CPEC algorithm, the vector library size: " + vecLibrary.size());
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSCPEC cpec = new SRSCPEC();
        
        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
        efficiencies.put(2, 1.0);
        efficiencies.put(3, 0.8);
        efficiencies.put(4, 0.6);
        
        Statistics.start();
        ArrayList<SRSGraph> optimalGraphs = cpec.cpecClothoWrapper(gps, vecLibrary, _required, _recommended, _forbidden, library, false, efficiencies);
        Statistics.stop();
        solutionStats(optimalGraphs, false);

        //Clean up data
        library = null;
        gps = null;
    }

    /** Run SRS algorithm for SLIC **/
    private void runSLIC() {

        //Run algorithm for SLIC assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        HashSet<Vector> vecLibrary = populateVectorLibrary();
        System.out.println("Upon entry to SLIC algorithm, the vector library size: " + vecLibrary.size());
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSSLIC slic = new SRSSLIC();
        
        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
        efficiencies.put(2, 1.0);
        efficiencies.put(3, 1.0);
        efficiencies.put(4, 1.0);
        
        Statistics.start();
        ArrayList<SRSGraph> optimalGraphs = slic.slicClothoWrapper(gps, vecLibrary, _required, _recommended, _forbidden, library, false, efficiencies);
        Statistics.stop();
        solutionStats(optimalGraphs, false);

        //Clean up data
        library = null;
        gps = null;
    }

    /** Run SRS algorithm for MoClo **/
    private void runMoClo() {

        //Run algorithm for MoClo assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSMoClo moclo = new SRSMoClo();
        
        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
        efficiencies.put(2, 1.0);
        efficiencies.put(3, 1.0);
        efficiencies.put(4, 0.9);
        efficiencies.put(5, 0.8);
        efficiencies.put(6, 0.5);
        
        Statistics.start();
        ArrayList<SRSGraph> optimalGraphs = moclo.mocloClothoWrapper(gps, null, _required, _recommended, _forbidden, library, true, efficiencies);
        Statistics.stop();

        //Given intermediates found, apply to selection table
        DefaultTableModel model = ((DefaultTableModel) selectIntermediatesTable.getModel());
        for (int i = 0; i < model.getRowCount(); i++) {
            for (String req : _required) {
                if (model.getValueAt(i, 0).toString().equalsIgnoreCase(req)) {
                    model.setValueAt(true, i, 2);
                }
            }
        }
        
        solutionStats(optimalGraphs, true);

        //Clean up data
        library = null;
        gps = null;
    }
    
    /** Run SRS algorithm for Golden Gate **/
    private void runGoldenGate() {

        //Run algorithm for Golden Gate assembly
        _assemblyGraphs.clear();
        findReqRecForbIntermediates();
        ArrayList<Part> library = populatePartLibrary();
        ArrayList<Part> gps = new ArrayList();
        gps.addAll(_goalParts.keySet());
        SRSGoldenGate gg = new SRSGoldenGate();
        
        HashMap<Integer, Double> efficiencies = new HashMap<Integer, Double>();
        efficiencies.put(2, 1.0);
        efficiencies.put(3, 1.0);
        efficiencies.put(4, 1.0);
        efficiencies.put(5, 1.0);
        efficiencies.put(6, 1.0);
        
        Statistics.start();
        ArrayList<SRSGraph> optimalGraphs = gg.goldenGateClothoWrapper(gps, null, _required, _recommended, _forbidden, library, true, efficiencies);
        Statistics.stop();
        solutionStats(optimalGraphs, false);

        //Clean up data
        library = null;
        gps = null;
    }

    /**************************************************************************
     * 
     * EUGENE ALGORITHMS
     * 
     **************************************************************************/
    /** For selected composite parts, turn them into a parts file in Eugene code **/
    private void compositePartToEugeneFile() {

        //Get selected composite parts and their basic parts
        HashMap<Part, ArrayList<Part>> compParts = _goalParts;
        Set<Part> keyset = compParts.keySet();
        HashSet<String> seenPartTypes = new HashSet<String>();
        HashSet<String> seenParts = new HashSet<String>();
        StringBuilder eugeneFile = new StringBuilder();
        eugeneFile.append("//PART PROPERTIES\nProperty Name(txt);\nProperty Sequence(txt);\n\n//PART TYPES\n");

        //For all composite parts in this hash, get the part properties
        for (Part gp : keyset) {
            ArrayList<Part> basicParts = compParts.get(gp);
            for (Part bp : basicParts) {
                ArrayList<String> sTags = bp.getSearchTags();
                ArrayList<String> type = new ArrayList<String>();
                String typeTag = new String();
                for (int k = 0; k < sTags.size(); k++) {
                    if (sTags.get(k).startsWith("Type:")) {
                        typeTag = sTags.get(k);
                        ArrayList<String> types = SRSAlgorithmCore.parseTypeTags(typeTag);
                        type.addAll(types);
                        typeTag = type.get(0);
                    }
                }
                if (!seenPartTypes.contains(typeTag)) {
                    eugeneFile.append("Part ").append(type).append("(Name, Sequence);\n");
                }
                seenPartTypes.add(typeTag);
            }
        }
        eugeneFile.append("\n");

        //For all composite parts in this hash, assign concrete
        for (Part gp : keyset) {
            ArrayList<Part> basicParts = compParts.get(gp);
            for (Part bp : basicParts) {
                String name = bp.getName();
                ArrayList<String> sTags = bp.getSearchTags();
                ArrayList<String> type = new ArrayList<String>();
                String typeTag = new String();
                for (int k = 0; k < sTags.size(); k++) {
                    if (sTags.get(k).startsWith("Type:")) {
                        typeTag = sTags.get(k);
                        ArrayList<String> types = SRSAlgorithmCore.parseTypeTags(typeTag);
                        type.addAll(types);
                        typeTag = type.get(0);
                    }
                }
                String seq = bp.getSeq().toString();
                if (!seenParts.contains(name)) {
                    eugeneFile.append(type).append(" ").append(name).append("(.Name(\"").append(name).append("\"), .Sequence(\"").append(seq).append("\"));\n");
                }
                seenParts.add(name);
            }
        }
        eugeneFile.append("\n");

        //Create devices
        eugeneFile.append("//GOAL PARTS\n");
        for (Part gp : keyset) {
            eugeneFile.append("Device ").append(gp.getName()).append("(");
            ArrayList<Part> basicParts = compParts.get(gp);
            for (int i = 0; i < basicParts.size(); i++) {
                String name = basicParts.get(i).getName();
                if (i == (basicParts.size() - 1)) {
                    eugeneFile.append(name);
                } else {
                    eugeneFile.append(name).append(", ");
                }
            }
            eugeneFile.append(");\n");
        }
        eugeneFile.append("\nDevice[] devices = [");

        //Create array of devices
        for (Part gp : keyset) {
            eugeneFile.append(gp.getName()).append(", ");
        }
        eugeneFile.deleteCharAt(eugeneFile.length() - 1);
        eugeneFile.deleteCharAt(eugeneFile.length() - 1);
        eugeneFile.append("];\n");
        
        String eugFile = eugeneFile.toString();

        //Save to file in eugenescripts package
        File file = new File("/Users/evanappleton/dfx/ClothoSDSViewer/src/eugenescripts/parts.h");
        try {
            FileWriter fw = new FileWriter(file);
            BufferedWriter out = new BufferedWriter(fw);
            out.write(eugFile);
            out.close();
        } catch (Exception e) {
//            e.printStackTrace();
        }

        //Clean up memory
        eugFile = null;
        eugeneFile = null;
        compParts = null;
        seenPartTypes = null;
        seenParts = null;
        keyset = null;
    }

    /** Select a Eugene file to select intermediates for algorithm **/
    private String[] eugeneSriptSelect(String intermediates) {
        String[] results = new String[0];

        //Pick a file
        JFileChooser fc = new JFileChooser("/Users/evanappleton/dfx/ClothoSDSViewer/src/eugenescripts/");
        fc.setDialogTitle("Select Eugene " + intermediates + " Intermediate Selection File...");
        int returnVal = fc.showSaveDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File eugFile = fc.getSelectedFile();

            //Execute eugene script
            try {
                long nBefore = System.nanoTime();
                results = (String[]) EugeneExecutor.execute(eugFile, 1);
//                 1 ... print the output set to the console
//
//                System.out.println("**** RESULTS ****");
//                if (null != results) {
//                    for (int i = 0; i < results.length; i++) {
//                        System.out.println(results[i]);
//                    }
//                }
//                System.out.println("*****************");
//
//
                double nProcessing = (System.nanoTime() - nBefore) * Math.pow(10, -9);
                System.out.println("processing time: " + nProcessing + "sec");
                
            } catch (Exception e) {
//                e.printStackTrace();
            }
        }
        return results;
    }

    /** Parse Eugene output text back to strings needed to match intermediates **/
    private String[] eugeneToInts(String[] intermediates) {

        //Go through Eugene output and convert them back to intermediate strings
        if (null != intermediates) {
            for (int i = 0; i < intermediates.length; i++) {
                String finalInt = new String();
                String anInt = intermediates[i];
                int start = anInt.indexOf("(");
                int end = anInt.indexOf(")");
                anInt = anInt.substring(start + 1, end);
                String[] tokens = anInt.split(",");
                for (int j = 0; j < tokens.length; j++) {
                    if (j == (tokens.length - 1)) {
                        finalInt = finalInt + tokens[j];
                    } else {
                        finalInt = finalInt + tokens[j] + ", ";
                    }
                }
                finalInt = "[" + finalInt + "]";
                intermediates[i] = finalInt;
            }
        }
        return intermediates;
    }
    //FIELDS
    private HashMap<Part, ArrayList<Part>> _goalParts;
//    private HashSet<Vector> _vectors;
    private HashSet<String> _required;
    private HashSet<String> _recommended;
    private HashSet<String> _forbidden;
    private Statistics _statistics = new Statistics();
    private ArrayList<SRSGraph> _assemblyGraphs = new ArrayList<SRSGraph>();
}
